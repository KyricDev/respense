import { expensescontext } from '../data/usercontext.js';
function isDate(date) {
    let year = date.slice(0, 4);
    if (isNaN(parseInt(year)))
        return false;
    let hyphen = date.slice(4, 5);
    if (hyphen != '-')
        return false;
    let month = parseInt(date.slice(5, 7));
    if (isNaN(month))
        return false;
    if (month < 1 || month > 12)
        return false;
    return true;
}
export default async function (req, res, next) {
    if (!req.session.userid)
        return res.status(404).send({ 'statusText': 'Not Logged In' });
    if (!req.body.name || !req.body.value)
        return res.status(404).send({ 'statusText': 'Name or Value Required' });
    if (!isNaN(parseInt(req.body.name)))
        return res.status(404).send({ 'statusText': 'Name Entered is a Number' });
    if (isNaN(parseInt(req.body.value)))
        return res.status(404).send({ 'statusText': 'Value Entered is not a Number' });
    let date = req.body.date;
    let periodStart = req.body.periodStart;
    let periodEnd = req.body.periodEnd;
    console.log(req.body.isChecked);
    let isChecked = (req.body.isChecked == 'true') ? true : (req.body.isChecked == 'false') ? false : null;
    if (date.length > 10 || periodStart.length > 10 || periodEnd.length > 10)
        return res.status(404).send({ 'statusText': 'Date too long' });
    if (isChecked == null)
        return res.status(404).send({ 'statusText': 'isChecked not Boolean' });
    try {
        if (isChecked) {
            if (!periodStart || !periodEnd)
                return res.status(404).send({ 'statusText': 'Recurring but Start and/or End Date Missing' });
            if (!isDate(periodStart) || !isDate(periodEnd))
                return res.status(404).send({ 'statusText': 'Dates Sent are not Dates' });
            let start = (parseInt(periodStart.slice(0, 4)) * 12) + parseInt(periodStart.slice(5, 7));
            let end = (parseInt(periodEnd.slice(0, 4)) * 12) + parseInt(periodEnd.slice(5, 7));
            let period = end - start;
            for (let i = 0; i <= period; i++) {
                let month = (((start + i) % 12) == 0) ? 12 : ((start + i) % 12);
                let year = Math.floor((start + i - 1) / 12);
                let newDate = `${year}-${month}`;
                console.log(newDate);
                console.log((start + i - 1) / 12);
                await expensescontext.build({
                    type: req.body.name,
                    value: req.body.value,
                    date: newDate,
                    isRecurring: req.body.isChecked,
                    periodStart: periodStart,
                    periodEnd: periodEnd,
                    UserId: req.session.userid,
                    isComplete: false
                })
                    .save();
            }
        }
        else {
            if (!date)
                return res.status(404).send({ 'statusText': 'Date is Required' });
            if (!isDate(date))
                return res.status(404).send({ 'statusText': 'Date Sent is not Date' });
            await expensescontext.build({
                type: req.body.name,
                value: req.body.value,
                date: date,
                isRecurring: req.body.isChecked,
                periodStart: null,
                periodEnd: null,
                UserId: req.session.userid,
                isComplete: false
            })
                .save();
        }
    }
    catch (err) {
        console.log(err);
    }
    res.status(202).send({
        status: 'success'
    })
        .end();
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkZXhwZW5zZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvYWRkZXhwZW5zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQsU0FBUyxNQUFNLENBQUUsSUFBWTtJQUN6QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUV4QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLE1BQU0sSUFBSSxHQUFHO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFaEMsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDL0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFMUMsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxXQUFXLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtJQUNsRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLFlBQVksRUFBRSxlQUFlLEVBQUMsQ0FBQyxDQUFDO0lBQ3RGLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxD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