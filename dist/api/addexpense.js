import { expensescontext } from '../data/usercontext.js';
function isDate(date) {
    let year = date.slice(0, 4);
    if (isNaN(parseInt(year)))
        return false;
    let hyphen = date.slice(4, 5);
    if (hyphen != '-')
        return false;
    let month = parseInt(date.slice(5, 7));
    if (isNaN(month))
        return false;
    if (month < 1 || month > 12)
        return false;
    return true;
}
export default async function (req, res, next) {
    if (!req.session.userid)
        return res.status(404).send({ 'statusText': 'Not Logged In' });
    if (!req.body.name || !req.body.value)
        return res.status(404).send({ 'statusText': 'Name or Value Required' });
    if (!isNaN(parseInt(req.body.name)))
        return res.status(404).send({ 'statusText': 'Name Entered is a Number' });
    if (isNaN(parseInt(req.body.value)))
        return res.status(404).send({ 'statusText': 'Value Entered is not a Number' });
    let date = req.body.date;
    let periodStart = req.body.periodStart;
    let periodEnd = req.body.periodEnd;
    let isChecked = (req.body.isChecked == 'true') ? true : (req.body.isChecked == 'false') ? false : null;
    if (date.length > 10 || periodStart.length > 10 || periodEnd.length > 10)
        return res.status(404).send({ 'statusText': 'Date too long' });
    if (isChecked == null)
        return res.status(404).send({ 'statusText': 'isChecked not Boolean' });
    try {
        if (isChecked) {
            if (!periodStart || !periodEnd)
                return res.status(404).send({ 'statusText': 'Recurring but Start and/or End Date Missing' });
            if (!isDate(periodStart) || !isDate(periodEnd))
                return res.status(404).send({ 'statusText': 'Dates Sent are not Dates' });
            let start = (parseInt(periodStart.slice(0, 4)) * 12) + parseInt(periodStart.slice(5, 7));
            let end = (parseInt(periodEnd.slice(0, 4)) * 12) + parseInt(periodEnd.slice(5, 7));
            let period = end - start;
            for (let i = 0; i <= period; i++) {
                let month = (((start + i) % 12) == 0) ? 12 : ((start + i) % 12);
                let year = Math.floor((start + i - 1) / 12);
                let newDate = `${year}-${month}`;
                console.log(newDate);
                console.log((start + i - 1) / 12);
                await expensescontext.build({
                    type: req.body.name,
                    value: req.body.value,
                    date: newDate,
                    isRecurring: req.body.isChecked,
                    periodStart: periodStart,
                    periodEnd: periodEnd,
                    UserId: req.session.userid,
                    isComplete: false
                })
                    .save();
            }
        }
        else {
            if (!date)
                return res.status(404).send({ 'statusText': 'Date is Required' });
            if (!isDate(date))
                return res.status(404).send({ 'statusText': 'Date Sent is not Date' });
            await expensescontext.build({
                type: req.body.name,
                value: req.body.value,
                date: date,
                isRecurring: req.body.isChecked,
                periodStart: null,
                periodEnd: null,
                UserId: req.session.userid,
                isComplete: false
            })
                .save();
        }
    }
    catch (err) {
        console.log(err);
    }
    res.status(202).send({
        status: 'success'
    })
        .end();
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkZXhwZW5zZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvYWRkZXhwZW5zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQsU0FBUyxNQUFNLENBQUUsSUFBWTtJQUN6QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUV4QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLE1BQU0sSUFBSSxHQUFHO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFaEMsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDL0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFMUMsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxXQUFXLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtJQUNsRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNO1FBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLFlBQVksRUFBRSxlQUFlLEVBQUMsQ0FBQyxDQUFDO0lBQ3RGLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxD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