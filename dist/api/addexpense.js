import { expensescontext } from '../data/usercontext.js';
export default async function (req, res, next) {
    console.log(req.session.userid);
    console.log(req.body);
    let date = (req.body.date == '') ? '0' : req.body.date;
    let periodStart = (req.body.periodStart == '') ? '0' : req.body.periodStart;
    let periodEnd = (req.body.periodEnd == '') ? '0' : req.body.periodEnd;
    let isChecked = (req.body.isChecked == 'true') ? true : false;
    try {
        if (isChecked) {
            let start = (parseInt(periodStart.slice(0, 4)) * 12) + parseInt(periodStart.slice(5, 7));
            let end = (parseInt(periodEnd.slice(0, 4)) * 12) + parseInt(periodEnd.slice(5, 7));
            let period = end - start;
            for (let i = 0; i <= period; i++) {
                let month = (((start + i) % 12) == 0) ? 12 : ((start + i) % 12);
                let year = Math.floor((start + i - 1) / 12);
                let newDate = `${year}-${month}`;
                console.log(newDate);
                console.log((start + i - 1) / 12);
                await expensescontext.build({
                    type: req.body.name,
                    value: req.body.value,
                    date: newDate,
                    isRecurring: req.body.isChecked,
                    periodStart: periodStart,
                    periodEnd: periodEnd,
                    UserId: req.session.userid,
                    isComplete: false
                })
                    .save();
            }
        }
        else {
            await expensescontext.build({
                type: req.body.name,
                value: req.body.value,
                date: date,
                isRecurring: req.body.isChecked,
                periodStart: parseInt(periodStart),
                periodEnd: parseInt(periodEnd),
                UserId: req.session.userid,
                isComplete: false
            })
                .save();
        }
    }
    catch (err) {
        console.log(err);
    }
    res.status(202).send({
        status: 'success'
    })
        .end();
    return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkZXhwZW5zZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvYWRkZXhwZW5zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFdBQVcsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQTBCO0lBQ2xHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixJQUFJLElBQUksR0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQy9ELElBQUksV0FBVyxHQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDcEYsSUFBSSxTQUFTLEdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUM5RSxJQUFJLFNBQVMsR0FBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzRSxJQUFHO1FBQ0MsSUFBSSxTQUFTLEVBQUM7WUFDVixJQUFJLEtBQUssR0FBVyxDQUFDLFFBQVEs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